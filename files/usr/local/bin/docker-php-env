#!/usr/bin/env php
<?php

class PhpEnvironment
{
    const VARIABLES_TO_DISCARD = [
        'USER',
        'HOME',
        'TERM',
        'HOSTNAME',
        'LS_COLORS',
        'PATH',
        'PWD',
        'SHLVL',
        'affinity:container',
        'LESSOPEN',
        'LESSCLOSE',
        'OLDPWD',
        'PHP_SELF',
        'SCRIPT_NAME',
        'SCRIPT_FILENAME',
        'PATH_TRANSLATED',
        'DOCUMENT_ROOT',
        'REQUEST_TIME_FLOAT',
        'REQUEST_TIME',
        'argv',
        'argc',
        'TMP',
        'TEMP',
        'TMPDIR',
        'PHP_LIB',
        '_',
        'PHP_INI_DIR',
        'PHP_RUN_DIR',
        'PHP_LOG_DIR',
        'PHP_DATA_DIR',
        'PHP_SRC_DIR',
        'PHP_CONF_DIR',
        'PECL_SRC_DIR',
        'SRC_DIR',
        'FPM_GROUP',
        'FASTCGI_PASS',
        'FPM_LISTEN',
        'FPM_USER',
        'NGINX_VERSION',
        'NJS_VERSION',
        'NGINX_GPGKEY',
        'NGINX_CORS',
        'NGINX_CORS_ORIGIN',
        'NGINX_CORS_METHODS',
        'NGINX_CORS_HEADERS',
        'NGINX_CORS_CONF',
        'NGINX_CORS_CREDENTIALS',
        'NGINX_CORS_EXPOSE_HEADERS',
        'NGINX_LOCATION',
        'NGINX_HEADER',
        'NGINX_ACCESS_LOG',
        'NGINX_ACCESS_LOG_LEVEL',
        'NGINX_ERROR_LOG_LEVEL',
        'DEPS',
        'DEV_DEPS',
        'DEBIAN_FRONTEND',
        'UPSTREAM',
        'WEBROOT',
        'SLOWLOG_TIMEOUT',
        'INDEX_FILENAME',
        'PHP_VERSION',
        'PHP_SHA256',
        'PHP_GPGKEYS',
        'PHP_EXTRACONF',
        'PHP_EXTENSIONS',
        'PHP_ACCESS_LOG',
        'PHP_EXTENSIONS',
        'PHP_SESSION_SAVE_HANDLER',
        'PHP_SESSION_SAVE_PATH',
        'PHP_LOAD_EXTENSIONS',
        'PHP_VARIABLES_ORDER',
        'PHP_MEM_LIMIT',
        'PHP_UPLOAD_MAX_FILESIZE',
        'PHP_POST_MAX_SIZE',
        'PHP_LDFLAGS',
        'PHP_CPPFLAGS',
        'PHP_CFLAGS',
        'REPOGITORY_URL',
        'LIBRARY_V8_VERSION',
        'LIBRARY_RABBITMQ_VERSION',
        'EXTENSION_YAML_VERSION',
        'EXTENSION_IGBINARY_VERSION',
        'EXTENSION_MSGPACK_VERSION',
        'EXTENSION_APCU_VERSION',
        'EXTENSION_MEMCACHED_VERSION',
        'EXTENSION_REDIS_VERSION',
        'EXTENSION_MONGODB_VERSION',
        'EXTENSION_COUCHBASE_VERSION',
        'EXTENSION_CASSANDRA_VERSION',
        'EXTENSION_IMAGICK_VERSION',
        'EXTENSION_UUID_VERSION',
        'EXTENSION_EV_VERSION',
        'EXTENSION_UV_VERSION',
        'EXTENSION_SSH2_VERSION',
        'EXTENSION_PHALCON_VERSION',
        'EXTENSION_SODIUM_VERSION',
        'EXTENSION_SQLSRV_VERSION',
        'EXTENSION_GEARMAN_VERSION',
        'EXTENSION_AMQP_VERSION',
        'EXTENSION_V8JS_VERSION',
        'EXTENSION_V8_VERSION',
        'EXTENSION_SCREWIM_VERSION',
        'EXTENSION_SWOOLE_VERSION',
        'EXTENSION_HTTP_VERSION',
        'EXTENSION_XLSWRITER_VERSION',
        'EXTENSION_XDEBUG_VERSION',
        'EXTENSION_JSONNET_VERSION',
        'EXTENSION_EIO_VERSION',
        'EXTENSION_EVENT_VERSION',
        'EXTENSION_MEMPROF_VERSION',
        'DOCKERIZE_VERSION',
        'DEFAULT_EXTENSIONS',
        'MINI_EXTENSIONS',
        'FULL_EXTENSIONS',
        'PROXY_VARIABLES_FIXED',
        'PM',
    ];

    public static function getEnvironmentVariables()
    {
        $variables = [];

        foreach ($_SERVER as $key => $value) {
            if (!static::mustIgnoreVariable($key)) {
                $variables[$key] = $value;
            }
        }

        ksort($variables);

        return $variables;
    }

    public static function mustIgnoreVariable($variableName)
    {
        return in_array($variableName, static::VARIABLES_TO_DISCARD);
    }

    /**
     * Prints the environment
     */
    public static function fpm()
    {
        $variables = static::getEnvironmentVariables();

        foreach ($variables as $key => $value) {
            if ($key && $value) {
                echo 'env['.$key.']="'.addcslashes(str_replace(PHP_EOL, '\n', trim($value)), '"').'"'.PHP_EOL;
            }
        }
    }

    /**
     * Prints the environment
     */
    public static function environment()
    {
        $variables = static::getEnvironmentVariables();

        foreach ($variables as $key => $value) {
            if ($key && $value) {
                echo $key.'="'.addcslashes(str_replace(PHP_EOL, '\n', trim($value)), '"').'"'.PHP_EOL;
            }
        }
    }
}

if (true === isset($argv[1])) {
    $call = 'PhpEnvironment::'.$argv[1];
    $call();
}
